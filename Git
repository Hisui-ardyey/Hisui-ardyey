import org.springframework.http.HttpStatus
import org.springframework.security.core.Authentication
import org.springframework.security.core.context.SecurityContextHolder
import org.springframework.security.oauth2.jwt.Jwt
import org.springframework.web.server.ResponseStatusException
import spock.lang.Specification
import spock.lang.Unroll

class JwtServiceImplSpec extends Specification {

    def jwtService = new JwtServiceImpl()

    @Unroll
    def "extractUsername should return msid when JWT is valid and present, or throw exception when #condition"() {
        given:
        Authentication authentication = Mock()
        SecurityContextHolder.getContext().setAuthentication(authentication)
        Jwt jwt = Mock() // Initialize jwt here

        when: "Valid JWT and msid present"
        jwt.getClaimAsString("msid") >> "test-msid"
        authentication.getPrincipal() >> jwt
        String username = jwtService.extractUsername()

        then: "Should return msid"
        username == "test-msid"

        when: "Authentication is null"
        SecurityContextHolder.getContext().setAuthentication(null)
        jwtService.extractUsername()

        then: "Should throw Unauthorized exception"
        thrown(ResponseStatusException) {
            it.status == HttpStatus.UNAUTHORIZED
            it.message == "Unauthorized: Invalid Token"
        }

        when: "Principal is not JWT"
        authentication.getPrincipal() >> "not a jwt"
        jwtService.extractUsername()

        then: "Should throw Unauthorized exception"
        thrown(ResponseStatusException) {
            it.status == HttpStatus.UNAUTHORIZED
            it.message == "Unauthorized: Invalid Token"
        }

        when: "msid claim is null"
        jwt.getClaimAsString("msid") >> null
        authentication.getPrincipal() >> jwt
        jwtService.extractUsername()

        then: "Should throw Unauthorized exception"
        thrown(ResponseStatusException) {
            it.status == HttpStatus.UNAUTHORIZED
            it.message == "Unauthorized: Invalid Token"
        }

        when: "msid claim is empty"
        jwt.getClaimAsString("msid") >> ""
        authentication.getPrincipal() >> jwt
        jwtService.extractUsername()

        then: "Should throw Unauthorized exception"
        thrown(ResponseStatusException) {
            it.status == HttpStatus.UNAUTHORIZED
            it.message == "Unauthorized: Invalid Token"
        }

        where:
        condition << ["Valid JWT and msid present", "Authentication is null", "Principal is not JWT", "msid claim is null", "msid claim is empty"] // Keep the descriptions for clarity
    }
}
